'use strict';const express = require('express');const graphqlHTTP = require('express-graphql');const {	GraphQLSchema,	GraphQLObjectType,	GraphQLInputObjectType,	GraphQLList,	GraphQLNonNull,	GraphQLID,	GraphQLString,	GraphQLInt,	GraphQLBoolean } = require('graphql');const {getVideoById, getVideos, createVideo} = require('./src/data');const {	globalIdField,	connectionDefinitions,	connectionFromPromisedArray,	connectionArgs,	mutationWithClientMutationId} = require('graphql-relay');const {nodeInterface, nodeField} = require('./src/node');const PORT = process.env.PORT || 3000;const server = express();// const instructorType = new GraphQLObjectType({// 	fields: {// 		id: {// 			type: GraphQLID,// 			description: 'The id of the video'// 		},// 	},// 	interfaces: [nodeInterface ],// });const videoType = new GraphQLObjectType({	name: 'Video',	description: 'Sample description of video',	fields: {		id: globalIdField(),		// id: {		// 	type: new GraphQLNonNull(GraphQLID),		// 	description: 'The id of the video'		// },		title: {			type: GraphQLString,			description: 'The title of the video'		},		duration: {			type: GraphQLInt,			description: 'The duration of the video (in seconds)'		},		watched: {			type: GraphQLBoolean,			description: 'Whether or not the user watched the video'		}	},	interfaces: [nodeInterface],});exports.videoType = videoType;const {connectionType: VideoConnection} = connectionDefinitions({	nodeType: videoType,	connectionFields: () => ({		totalCount: {			type: GraphQLInt,			description: 'A count of the total number of objects in this connection.',			resolve: (conn) => {				return conn.edges.length;			}		}	})});const queryType = new GraphQLObjectType({	name: 'QueryType',	description: 'The root query type.',	fields: {		node: nodeField,		videos: {			type: VideoConnection,			args: connectionArgs,			resolve: (_, args) => connectionFromPromisedArray(				getVideos(),				args			)			// type: new GraphQLList(videoType),			// resolve: getVideos,		},		video: {			type: videoType,			args: {				id: {					type: new GraphQLNonNull(GraphQLID),			 		description: 'The id of the video'				},			},			resolve: (_, args) => {				return getVideoById(args.id);			},			// resolve: () => new Promise((resolve) => {			// 	resolve({			// 		id: 'a',			// 		title: 'GraphQL',			// 		duration: 180,			// 		watched: false			// 	});			// })		}	}});// const videoInputType = new GraphQLInputObjectType({// 	name: 'VideoInput',// 	fields: {// 		title: {// 			type: new GraphQLNonNull(GraphQLString),// 			description: 'The title of the video.'// 		},// 		duration: {// 			type: new GraphQLNonNull(GraphQLInt),// 			description: 'The duration of the video (in seconds).'// 		},// 		released: {// 			type: new GraphQLNonNull(GraphQLBoolean),// 			description: 'Whether or not the video is released.'// 		}// 	}// });const videoMutation = mutationWithClientMutationId({	name: 'AddVideo',	inputFields: {		 title: {			type: new GraphQLNonNull(GraphQLString),			description: 'The title of the video.'		},		duration: {			type: new GraphQLNonNull(GraphQLInt),			description: 'The duration of the video (in seconds).'		},		released: {			type: new GraphQLNonNull(GraphQLBoolean),			description: 'Whether or not the video is released.'		}	},	outputFields: {		video: {			type: videoType		}	},	mutateAndGetPayload: (args) => new Promise((resolve, reject) => {		Promise.resolve(createVideo(args))		.then((video) => resolve({video}))		.catch(reject);	})});const mutationType = new GraphQLObjectType({	name: 'Mutation',	description: 'The root Mutation type.',	fields: {		createVideo: videoMutation		// {			// type: videoType,			// args: {			// 	video: {			// 		type: new GraphQLNonNull(videoInputType)			// 	}			// 	// title: {			// 	// 	type: new GraphQLNonNull(GraphQLString),			// 	// 	description: 'The title of the video.'			// 	// },			// 	// duration: {			// 	// 	type: new GraphQLNonNull(GraphQLInt),			// 	// 	description: 'The duration of the video (in seconds).'			// 	// },			// 	// released: {			// 	// 	type: new GraphQLNonNull(GraphQLBoolean),			// 	// 	description: 'Whether or not the video is released.'			// 	// }			// },			// resolve: (_, args) => {			// 	return createVideo(args.video);			// }		// }	}});const schema = new GraphQLSchema({	query: queryType,	mutation: mutationType,	// subsciption });server.use('/', graphqlHTTP({	schema, 	graphiql: true,	// rootValue: resolvers}));server.listen(PORT, () => {	console.log(`Listening on http://localhost:${PORT}`);})// const resolvers = {// 	video: () => ({// 		id: () => '1',// 		title: () => 'bar',// 		duration: () => 100,// 		watched: () => true// 	}),// 	videos: () => videos// };// const schema = buildSchema(`// 	type Video {// 		id: ID,// 		title: String,// 		duration: Int,// 		watched: Boolean// 	}// 	type Query {// 		video: Video,// 		videos: [Video]// 	}// 	type Schema {// 		query: Query// 	}// `);// const query = `// 	query myFirstQuery {// 		videos {// 			id,// 			title, // 			duration,// 			watched// 		}// 	}// `;// graphql(schema, query, resolvers)// 	.then((result) => console.log(result))// 	.catch((error) => console.log(error));